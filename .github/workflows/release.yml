name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
      - master
jobs:
  lint:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: ./release/package.json
          property: version

      # 设置变量
      - env:
          RELEASE_VERSION: ${{steps.release_version.outputs.value}}
          RELEASE_DIR_NAME: teamide-${{steps.release_version.outputs.value}}
        run: export RELEASE_VERSION=`$RELEASE_VERSION` && export RELEASE_DIR_NAME=`$RELEASE_DIR_NAME`
        
      - run: export RELEASE_LINUX_NAME=`$RELEASE_DIR_NAME-linux-x64`
      - run: export RELEASE_WINDOWS_NAME=`$RELEASE_DIR_NAME-windows-x64`
      - run: export RELEASE_DARWIN_NAME=`$RELEASE_DIR_NAME-darwin-x64`
      
      - run: echo $RELEASE_LINUX_NAME
      - run: echo $RELEASE_WINDOWS_NAME
      - run: echo $RELEASE_DARWIN_NAME

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release/RELEASE.md

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.17"

      # 打包构建 html
      - name: use Node.js 10
        uses: actions/setup-node@v1
        with:
          node-version: 10
      # npm install
      - run: cd html && npm install && npm run build

      # 打包静态资源
      - run: go test -timeout 3600s -run ^TestStatic$ teamide/static

      # 打包Linux
      - run: export GOARCH=amd64 && export GOOS=linux && go build -o `release/$RELEASE_LINUX_NAME/teamide`
      - run: cp -rf release/conf `release/$RELEASE_LINUX_NAME/`
      - run: cp -rf release/README.md `release/$RELEASE_LINUX_NAME/`
      - run: cp -rf release/RELEASE.md `release/$RELEASE_LINUX_NAME/`
      - run: cd release && zip -q -r `$RELEASE_LINUX_NAME.zip` `$RELEASE_LINUX_NAME`

      # 打包Window
      - run: export GOARCH=amd64 && export GOOS=windows && go build -ldflags "-H windowsgui" -o `release/$RELEASE_WINDOWS_NAME/teamide.exe`
      - run: cp -rf release/conf `release/$RELEASE_WINDOWS_NAME/`
      - run: cp -rf release/README.md `release/$RELEASE_WINDOWS_NAME/`
      - run: cp -rf release/RELEASE.md `release/$RELEASE_WINDOWS_NAME/`
      - run: cd release && zip -q -r `$RELEASE_WINDOWS_NAME.zip` `$RELEASE_WINDOWS_NAME`

      # 打包MAC
      # - run: export GOARCH=amd64 && export GOOS=darwin && go build -o ./release/RELEASE_DARWIN_NAME/teamide
      # - run: cp -rf release/conf release/RELEASE_DARWIN_NAME/
      # - run: cp -rf release/README.md release/RELEASE_DARWIN_NAME/
      # - run: cp -rf release/RELEASE.md release/RELEASE_DARWIN_NAME/
      # - run: cd release && zip -q -r RELEASE_DARWIN_NAME.zip RELEASE_DARWIN_NAME

      # 发布
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: $RELEASE_VERSION
          release_name: $RELEASE_VERSION
          body: ${{steps.release_body.outputs.content}}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 上传构建结果到 Release（把打包的zip上传到Release）
      - name: Upload Go linux Release Asset
        id: upload-go-linux-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/$RELEASE_LINUX_NAME.zip # 要上传文件
          asset_name: $RELEASE_LINUX_NAME.zip # 上传后的文件名
          asset_content_type: application/zip

      - name: Upload Go Windows Release Asset
        id: upload-go-windows-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/$RELEASE_WINDOWS_NAME.zip # 要上传文件
          asset_name: $RELEASE_WINDOWS_NAME.zip # 上传后的文件名
          asset_content_type: application/zip

      # - name: Upload Go MAC Release Asset
      #   id: upload-go-MAC-release-asset
      #   uses: actions/upload-release-asset@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
      #     asset_path: ./release/RELEASE_DARWIN_NAME.zip # 要上传文件
      #     asset_name: RELEASE_DARWIN_NAME.zip # 上传后的文件名
      #     asset_content_type: application/zip
