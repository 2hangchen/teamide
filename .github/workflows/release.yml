name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
      # - dev
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 打包构建 html
      - name: use Node.js 10
        uses: actions/setup-node@v1
        with:
          node-version: 10

      # 打包构建 Server
      - name: use Go 1.18
        uses: actions/setup-go@v2
        with:
          go-version: "^1.18"

      # npm install
      - run: cd html && npm install && npm run build

      # 将静态资源打包html.go
      - run: go test -v -timeout 3600s -run ^TestStatic$ teamide/internal/static

      # 创建release相关目录
      - run: mkdir release
      - run: mkdir release/base
      - run: cp -rf package.json release/
      - run: cp -rf RELEASE.md release/
      - run: cp -rf README.md release/base/
      - run: cp -rf RELEASE_HISTORY.md release/base/RELEASE.md

      - run: cp -rf release/base release/teamide-linux-x64
      - run: cp -rf release/base release/teamide-server-linux-x64
      - run: cp -rf release/base release/teamide-darwin-x64
      - run: cp -rf release/base release/teamide-windows-x64

      - run: mkdir release/teamide-server-linux-x64/conf
      - run: cp -rf conf/release/* release/teamide-server-linux-x64/conf/


      - run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s -X main.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-linux-x64/teamide

#      - run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-w -s -X main.buildFlags=--isServer -X main.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-server-linux-x64/teamide

      - run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s -X main.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-darwin-x64/teamide

      - run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-w -s -H=windowsgui -X main.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-windows-x64/teamide.exe

      # 上传发布包
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  release:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      - id: release_check
        run: |
          echo "::set-output name=RELEASE_STATUS::$(curl -I -m 10 -o /dev/null -s -w %{http_code} https://github.com/team-ide/teamide/releases/tag/${{ steps.release_version.outputs.value }})"

      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        run: cd release && zip -q -r teamide-linux-x64.zip teamide-linux-x64
#      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
#        run: cd release && zip -q -r teamide-server-linux-x64.zip teamide-server-linux-x64
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        run: cd release && zip -q -r teamide-darwin-x64.zip teamide-darwin-x64
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        run: cd release && zip -q -r teamide-windows-x64.zip teamide-windows-x64


      # 读取发布说明
      - name: Read Release Description
        id: release_body
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: juliangruber/read-file-action@v1
        with:
          path: release/RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.release_version.outputs.value}}
          release_name: ${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 上传构建结果到 Release（把打包的zip上传到Release）
      - name: Upload TeamIDE Linux Release Asset
        id: upload-teamide-linux-release-asset
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-linux-x64.zip # 要上传文件
          asset_name: teamide-linux-x64.zip # 上传后的文件名
          asset_content_type: application/zip

#      - name: Upload TeamIDE Server Linux Release Asset
#        id: upload-teamide-server-linux-release-asset
#        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
#        uses: actions/upload-release-asset@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
#          asset_path: ./release/teamide-server-linux-x64.zip # 要上传文件
#          asset_name: teamide-server-linux-x64.zip # 上传后的文件名
#          asset_content_type: application/zip

      - name: Upload TeamIDE MAC Release Asset
        id: upload-teamide-darwin-release-asset
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-darwin-x64.zip # 要上传文件
          asset_name: teamide-darwin-x64.zip # 上传后的文件名
          asset_content_type: application/zip

      - name: Upload TeamIDE Windows Release Asset
        id: upload-teamide-windows-release-asset
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-windows-x64.zip # 要上传文件
          asset_name: teamide-windows-x64.zip # 上传后的文件名
          asset_content_type: application/zip
