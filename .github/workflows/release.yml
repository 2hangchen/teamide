name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
      # - dev
    # package.json 更改后再触发发布
#    paths: [ "package.json" ]
jobs:
  buildStatic:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 打包构建 html
      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16
      # npm install
      - run: |
          cd html 
          npm install
          npm run build

      # 创建release相关目录
      - run: |
          mkdir release
          mkdir release/base
          
          cp -rf package.json release/
          cp -rf RELEASE.md release/
          cp -rf README.md release/base/
          cp -rf CHANGELOG.md release/base/CHANGELOG.md
          
          cp -rf release/base release/teamide-linux-x64
          cp -rf release/base release/teamide-server-linux-x64
          cp -rf release/base release/teamide-darwin-x64
          cp -rf release/base release/teamide-windows-x64
          
          mkdir release/teamide-server-linux-x64/conf
          cp -rf conf/release/* release/teamide-server-linux-x64/conf/

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: html
          path: html/dist

  buildMAC:
    needs: buildStatic
    runs-on: macos-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: html
          path: html/dist

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.18"

      # 将静态资源打包html.go
      - run: |
          go test -v -timeout 3600s -run ^TestStatic$ teamide/internal/static
          go build -ldflags="-w -s -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./electron/teamide-darwin-x64 .
          go build -ldflags="-w -s -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-darwin-x64/teamide-node teamide/pkg/node/main

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv .git electron/
          chmod +x electron/teamide-darwin-x64
          cd electron
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --mac
      - run: |
          mv electron/release/build/TeamIDE-mac-1.0.0.dmg release/TeamIDE-mac.dmg

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  buildLinux:
    needs: buildStatic
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: html
          path: html/dist

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.18"

      # 将静态资源打包html.go
      - run: |
          go test -v -timeout 3600s -run ^TestStatic$ teamide/internal/static
          go build -ldflags="-w -s -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./electron/teamide-linux-x64 .
          CGO_ENABLED=0 go build -ldflags="-w -s -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-linux-x64/teamide-node teamide/pkg/node/main 

      #      - run: go build -ldflags "-w -s -X main.buildFlags=--isServer -X main.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-server-linux-x64/teamide

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp -rf lib/shentong/linux64/libaci.so electron/lib/libaci.so
          
          mv .git electron/
          chmod +x electron/teamide-linux-x64
          cd electron
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --linux
      - run: |
          mv electron/release/build/TeamIDE-linux-x64-1.0.0.AppImage release/TeamIDE-linux-x64.AppImage

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  buildWindow:
    needs: buildStatic
    runs-on: windows-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: html
          path: html/dist

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.18"

      # 将静态资源打包html.go
      # -H=windowsgui
      - run: |
          go mod tidy
          go test -v -timeout 3600s -run ^TestStatic$ teamide/internal/static
          go build -ldflags "-w -s -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./electron/teamide-windows-x64.exe .
          go build -ldflags="-w -s -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-windows-x64/teamide-node.exe teamide/pkg/node/main

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          move lib/shentong/win64/aci.dll electron/lib/aci.dll
          move lib/shentong/win64/aci.lib electron/lib/aci.lib
          move .git electron/.git
          cd electron
          set CSC_LINK="${{ secrets.CSC_LINK }}"
          set CSC_KEY_PASSWORD="${{ secrets.CSC_KEY_PASSWORD }}"
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --
      - run: |
          move electron/release/build/TeamIDE-windows-x64-1.0.0.exe release/TeamIDE-windows-x64.exe

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  release:
    needs:
      - buildMAC
      - buildLinux
      - buildWindow
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest ]
    steps:

      - name: Checkout git repo
        uses: actions/checkout@v1

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16
          cache: npm

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      - id: release_check
        run: |
          echo "::set-output name=RELEASE_STATUS::$(curl -I -m 10 -o /dev/null -s -w %{http_code} https://github.com/team-ide/teamide/releases/tag/v${{ steps.release_version.outputs.value }})"

      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-linux-x64.zip teamide-linux-x64
      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-server-linux-x64.zip teamide-server-linux-x64
      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-darwin-x64.zip teamide-darwin-x64
      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-windows-x64.zip teamide-windows-x64

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: juliangruber/read-file-action@v1
        with:
          path: release/RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{steps.release_version.outputs.value}}
          release_name: v${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 上传 到 Release
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: release/TeamIDE-windows-x64.exe
          asset_name: TeamIDE-windows-x64-${{steps.release_version.outputs.value}}.exe # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: release/TeamIDE-mac.dmg
          asset_name: TeamIDE-mac-${{steps.release_version.outputs.value}}.dmg # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: release/TeamIDE-linux-x64.AppImage
          asset_name: TeamIDE-linux-x64-${{steps.release_version.outputs.value}}.AppImage # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: release/teamide-linux-x64/teamide-node
          asset_name: teamide-node-linux-x64-${{steps.release_version.outputs.value}} # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: release/teamide-darwin-x64/teamide-node
          asset_name: teamide-node-darwin-x64-${{steps.release_version.outputs.value}} # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: release/teamide-windows-x64/teamide-node.exe
          asset_name: teamide-node-windows-x64-${{steps.release_version.outputs.value}}.exe # 上传后的文件名
          asset_content_type: application/zip