name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
      - master
      # - dev
jobs:
  buildStatic:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.17"

      # 打包构建 html
      - name: use Node.js 10
        uses: actions/setup-node@v1
        with:
          node-version: 10
      # npm install
      - run: cd html && npm install && npm run build

      # 创建release相关目录
      - run: mkdir release
      - run: cp -rf RELEASE.md release/
      - run: cp -rf package.json release/
      - run: mkdir release/base
      - run: mkdir release/base/data
      - run: mkdir release/base/log
      - run: cp -rf conf release/base/
      - run: cp -rf README.md release/base/
      - run: cp -rf RELEASE.md release/base/
      - run: cp -rf internal/static/html.go release/

      - run: mkdir release/teamide-linux-x64
      - run: mkdir release/teamide-windows-x64
      - run: mkdir release/teamide-darwin-x64
      - run: mkdir release/teamide-standalone-windows-x64

      - run: cp -rf release/base/* release/teamide-linux-x64/
      - run: cp -rf release/base/* release/teamide-windows-x64/
      - run: cp -rf release/base/* release/teamide-darwin-x64/
      - run: cp -rf release/base/* release/teamide-standalone-windows-x64
      - run: rm -rf release/teamide-standalone-windows-x64/conf

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: html.go
          path: internal/static/html.go

  buildLinux:
    needs: buildStatic
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.17"

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: html.go
          path: internal/static/html.go


      - run: export GOARCH=amd64 && export GOOS=linux && go build -o ./release/teamide-linux-x64/teamide

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  buildWindow:
    needs: buildLinux
    runs-on: windows-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.17"

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: html.go
          path: internal/static/html.go

      - run: export GOARCH=amd64 && export GOOS=windows && go build -o ./release/teamide-windows-x64/teamide.exe

      - run: export GOARCH=amd64 && export GOOS=windows && go build -ldflags "-X main.buildFlags=--isStandAlone" -o ./release/teamide-standalone-windows-x64/teamide.exe

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  release:
    needs: buildWindow
    runs-on: ubuntu-latest
    steps:
      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      - run: cd release && zip -q -r teamide-linux-x64.zip teamide-linux-x64
      - run: cd release && zip -q -r teamide-windows-x64.zip teamide-windows-x64
      - run: cd release && zip -q -r teamide-standalone-windows-x64.zip teamide-standalone-windows-x64

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        uses: juliangruber/read-file-action@v1
        with:
          path: release/RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.release_version.outputs.value}}
          release_name: ${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 上传构建结果到 Release（把打包的zip上传到Release）
      - name: Upload Go linux Release Asset
        id: upload-go-linux-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-linux-x64.zip # 要上传文件
          asset_name: teamide-linux-x64.zip # 上传后的文件名
          asset_content_type: application/zip

      - name: Upload Go Windows Release Asset
        id: upload-go-windows-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-windows-x64.zip # 要上传文件
          asset_name: teamide-windows-x64.zip # 上传后的文件名
          asset_content_type: application/zip

      - name: Upload Go Windows StandAlone Release Asset
        id: upload-go-windows-standalone-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-standalone-windows-x64.zip # 要上传文件
          asset_name: teamide-standalone-windows-x64.zip # 上传后的文件名
          asset_content_type: application/zip
