name: Team IDE release CI
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches: 
      - main
      - master
jobs:
  lint:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - run: export TEAMIDE_RELEASE_VERSION=`head -1 RELEASE.version`

      # 打包构建 html
      - name: use Node.js 10
        uses: actions/setup-node@v1
        with:
          node-version: 10
      # npm install
      - run: cd html && npm install && npm run build

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17'

      # 打包静态资源
      - run: go get -u github.com/jteeuwen/go-bindata/...
      - run: cd html/dist && go-bindata -pkg web -o ../../server/web/html.go ./...

      # 打包Linux
      - run: cd server && export GOARCH=amd64 && export GOOS=linux && go build -o ../release/teamide-linux-x64/server
      - run: cp -rf server/conf release/teamide-linux-x64/
      - run: cd release && zip -q -r teamide-go-linux-x64.zip teamide-linux-x64

      # 打包MAC
      - run: cd server && export GOARCH=amd64 && export GOOS=darwin && go build -o ../release/teamide-darwin-x64/server
      - run: cp -rf server/conf release/teamide-darwin-x64/
      - run: cd release && zip -q -r teamide-go-darwin-x64.zip teamide-darwin-x64

      # 打包Window
      - run: cd server && export GOARCH=amd64 && export GOOS=windows && go build -o ../release/teamide-windows-x64/server.exe
      - run: cp -rf server/conf release/teamide-windows-x64/
      - run: cd release && zip -q -r teamide-go-windows-x64.zip teamide-windows-x64

      # 发布Docker
      - name: Publish to Docker Repository
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          name: teamide/server
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 发布
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${ TEAMIDE_RELEASE_VERSION } # (tag)标签名称
          release_name: Release ${ TEAMIDE_RELEASE_VERSION }
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布
      # 上传构建结果到 Release（把打包的zip上传到Release）

      - name: Upload Go linux Release Asset
        id: upload-go-linux-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-linux-x64.zip # 要上传文件
          asset_name: teamide-linux-x64.zip # 上传后的文件名
          asset_content_type: application/zip
      - name: Upload Go MAC Release Asset
        id: upload-go-MAC-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-darwin-x64.zip # 要上传文件
          asset_name: teamide-darwin-x64.zip # 上传后的文件名
          asset_content_type: application/zip
      - name: Upload Go Windows Release Asset
        id: upload-go-windows-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./release/teamide-windows-x64.zip # 要上传文件
          asset_name: teamide-windows-x64.zip # 上传后的文件名
          asset_content_type: application/zip

