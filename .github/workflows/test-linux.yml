name: test-linux
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main-xx
    #   - dev
    # package.json 更改后再触发发布
#    paths: [ "package.json" ]
jobs:
  buildLinux:
    runs-on: ubuntu-latest
    container: docker.io/teamide/build:0.6
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.19"

      - run: |
          mkdir release
          mkdir release/teamide-server
          cp -rf conf/release release/teamide-server/conf
          cp -rf lib/shentong/linux64/libaci.so release/teamide-server/libaci.so
          go build -ldflags "-w -s -X main.buildFlags=--isServer -X teamide/pkg/util.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-server/teamide .

      - run: |
          cd release/teamide-server
          ldd teamide

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          #这里用到了github的secrets功能，避免账户和密码随仓库泄露
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        #导入这个模块来完成自动编译和推送
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译 linux/amd64,linux/arm64,linux/arm
          platforms: linux/amd64
          #指定用户/仓库名
          tags: teamide/teamide-server:${{ steps.release_version.outputs.value }}