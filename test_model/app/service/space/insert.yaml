api: # 暴露服务接口
  request:
    path: /space/insert # 提供WEB 接口能力

inVariables: # 定义入参变量
  - space:
      dataType: spaceInfo # 参数 user 类型为 结构体 userInfo 类型
      required: true
      dataPlace: body # 通过request body传参

outVariable: # 定义出参变量
  name: space

steps:
  - validates: # 验证数据完整性
      - space.name:
          required: true
          rules:
            - minLength: 4
              maxLength: 20
              errorMsg: 空间名称长度不能小于4大于20个字节
            - pattern: ^[a-zA-Z0-9_]+$
              errorMsg: 空间名称只能包含字母、数字、下划线
      - space.createUserId:
          required: true
          errorMsg: 创建用户ID不能为空
      - space.createUserName:
          required: true
          errorMsg: 创建用户名称不能为空

  - lock:
      name: spaceNameLock # 锁名称 出现锁 必须添加锁名称 如果为主动解锁，则到最后解锁
      type: redis # 使用 redis 锁
      key: "'space:lock:name:' + space.parentId + ':' + space.name" # 账号锁 高并发下 保证库中账号不重复

  - sqlSelect: # 根据账号和邮箱查询是否存在该用户
      selectCount: true #是统计查询
      table: TM_SPACE_INFO
      wheres:
        - parentId = {space.parentId} AND name = {space.name}
    variableName: countByName # 定义变量名 接收 调用dao层返回的值 后续使用

  - if: "countByName > 0" # 用户已存在，抛出异常 后续将不再执行
    error: SPACE_NAME_ALREADY_EXISTS

  - variables: # 设置一些初始值
      - space.spaceId: getID() # 生成ID
      - space.createTime: now() # 获取当前时间
      - space.activedState: 1
      - space.lockedState: 2
      - space.enabledState: 1
      - space.deletedState: 2

  - sqlInsert: # 插入用户信息
      table: TM_SPACE_INFO
      columns:
        - spaceId:
            value: space.spaceId
        - name:
            value: space.name
        - createUserId:
            value: space.createUserId
        - createUserName:
            value: space.createUserName
        - parentId:
            value: space.parentId
        - activedState:
            value: space.activedState
        - lockedState:
            value: space.lockedState
        - enabledState:
            value: space.enabledState
        - deletedState:
            value: space.deletedState
        - createTime:
            value: space.createTime

  - unlock: spaceNameLock # 解除 邮箱锁

  - redisSet: # 缓存用户信息到Redis
      key: "'space:info:' + space.spaceId"
      value: space

