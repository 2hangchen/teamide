
inVariables: # 定义入参变量
  - account:
      dataType: string # 参数 user 类型为 结构体 userInfo 类型
  - password:
      dataType: string # 参数 user 类型为 结构体 userInfo 类型

outVariable: # 定义出参变量
  name: user

steps:
  - validates: # 验证数据完整性
      - account:
          required: true
          errorMsg: 登录账号不能为空
      - password:
          required: true
          errorMsg: 登录密码不能为空

  - sqlSelect: # 根据账号和邮箱查询是否存在该用户
      selectOne: true #是统计查询
      table: TM_USER_INFO
      wheres:
        - account = {account} OR email = {account}
    variableName: user # 定义变量名 接收 调用dao层返回的值 后续使用
    variableDataType: userInfo

  - if: "user == null" # 用户已存在，抛出异常 后续将不再执行
    error: ACCOUNT_OR_PASSWORD_ERROR

  - sqlSelect: # 根据账号和邮箱查询是否存在该用户
      selectOne: true #是统计查询
      table: TM_USER_PASSWORD
      wheres:
        - userId = {user.userId}
    variableName: userPassword # 定义变量名 接收 调用dao层返回的值 后续使用
    variableDataType: userPassword

  - if: "userPassword == null" # 用户已存在，抛出异常 后续将不再执行
    error: ACCOUNT_OR_PASSWORD_ERROR

  - variables: # 设置一些初始值
      - loginPassword: MD5(userPassword.salt + password) # 生成ID

  - if: "loginPassword != userPassword.password" # 用户已存在，抛出异常 后续将不再执行
    error: ACCOUNT_OR_PASSWORD_ERROR